// This is your Prisma schema file for E-commerce Store
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id            String    @id
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  avatar        String?
  phone         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          Cart?
  favorites     Favorite[]
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Product Model
model Product {
  id            String    @id @default(uuid())
  name          String
  description   String    @db.Text
  price         Float
  comparePrice  Float?    @map("compare_price") // Original price for discount display
  images        String[]
  category      String
  stock         Int       @default(0)
  isActive      Boolean   @default(true) @map("is_active")
  isTrending    Boolean   @default(false) @map("is_trending")
  isFlashDeal   Boolean   @default(false) @map("is_flash_deal")
  rating        Float     @default(0)
  reviewCount   Int       @default(0) @map("review_count")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  favorites     Favorite[]
  
  @@map("products")
  @@index([category])
  @@index([isActive])
  @@index([isTrending])
  @@index([isFlashDeal])
}

// Cart Model
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@map("carts")
}

// Cart Item Model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("cart_items")
  @@unique([cartId, productId])
}

// Order Model
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique @map("order_number")
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PROCESSING)
  
  // Pricing
  subtotal        Float
  tax             Float
  shipping        Float
  discount        Float       @default(0) // Coupon discount amount
  total           Float
  
  // Coupon Info
  couponCode      String?     @map("coupon_code")
  couponId        String?     @map("coupon_id")
  coupon          Coupon?     @relation(fields: [couponId], references: [id])
  
  // Shipping Info
  shippingAddress String      @map("shipping_address")
  shippingCity    String      @map("shipping_city")
  shippingState   String      @map("shipping_state")
  shippingZip     String      @map("shipping_zip")
  shippingCountry String      @map("shipping_country")
  
  // Payment Info
  paymentMethod   String      @map("payment_method")
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deliveredAt     DateTime? @map("delivered_at")
  cancelledAt     DateTime? @map("cancelled_at")
  
  // Cancellation
  cancellationReason String? @map("cancellation_reason")
  
  // Relations
  items           OrderItem[]
  payment         Payment?
  
  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([couponId])
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED

  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED

  @@map("payment_status")
}

// Order Item Model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    // Price at time of order
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("order_items")
}

// Review Model
model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5
  title     String
  comment   String   @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("reviews")
  @@unique([userId, productId]) // One review per user per product
  @@index([productId])
}

// Address Model
model Address {
  id        String   @id @default(cuid())
  userId    String   @map("userId")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String   @map("fullName")
  phone     String
  address   String
  city      String
  state     String
  zipCode   String   @map("zipCode")
  country   String   @default("United States")
  isDefault Boolean  @default(false) @map("isDefault")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  
  @@map("addresses")
  @@index([userId])
}

// Favorite/Wishlist Model
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@map("favorites")
  @@unique([userId, productId])
  @@index([userId])
}

// Chat/Support Models
model ChatConversation {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id")
  userName        String    @map("user_name")
  userEmail       String    @map("user_email")
  status          String    @default("open") // open, closed
  lastReadByAdmin DateTime? @map("last_read_by_admin")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  messages ChatMessage[]

  @@map("chat_conversations")
  @@index([userId])
  @@index([status])
}

model ChatMessage {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  senderId       String   @map("sender_id")
  senderName     String   @map("sender_name")
  senderRole     String   @map("sender_role") // user, admin
  message        String   @db.Text
  imageUrl       String?  @map("image_url") @db.Text
  createdAt      DateTime @default(now()) @map("created_at")

  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([conversationId])
}

// M-Pesa Payment Model
model Payment {
  id                     String    @id @default(uuid())
  orderId                String    @unique @map("order_id")
  phoneNumber            String    @map("phone_number")
  amount                 Float
  merchantRequestID      String?   @map("merchant_request_id")
  checkoutRequestID      String?   @map("checkout_request_id")
  mpesaReceiptNumber     String?   @map("mpesa_receipt_number")
  transactionDate        DateTime? @map("transaction_date")
  resultCode             String?   @map("result_code")
  resultDesc             String?   @map("result_desc")
  status                 String    @default("pending") // pending, completed, failed
  
  // Stripe fields
  stripePaymentIntentId  String?   @map("stripe_payment_intent_id")
  stripeRefundId         String?   @map("stripe_refund_id")
  
  // Refund fields
  refundStatus           String?   @map("refund_status") // PENDING, COMPLETED, FAILED
  refundInitiatedAt      DateTime? @map("refund_initiated_at")
  refundCompletedAt      DateTime? @map("refund_completed_at")
  
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  logs  PaymentLog[]
  
  @@map("payments")
  @@index([orderId])
  @@index([checkoutRequestID])
  @@index([status])
}

// Payment Audit Log Model
model PaymentLog {
  id              String   @id @default(uuid())
  orderId         String   @map("order_id")
  paymentId       String?  @map("payment_id")
  payment         Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade, map: "fk_payment_logs_payment")
  
  action          String   // WEBHOOK_RECEIVED, VERIFICATION_REQUESTED, MANUAL_VERIFICATION, STATUS_UPDATED, AUTO_CANCELLED, etc.
  status          String   // SUCCESS, FAILED, PENDING
  method          String   // MPESA, STRIPE, MANUAL
  
  initiatedBy     String?  @map("initiated_by") // userId or "SYSTEM"
  initiatorRole   String?  @map("initiator_role") // USER, ADMIN, SYSTEM
  
  details         String?  @db.Text // JSON string with additional details
  errorMessage    String?  @db.Text @map("error_message")
  
  previousStatus  String?  @map("previous_status")
  newStatus       String?  @map("new_status")
  
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("payment_logs")
  @@index([orderId])
  @@index([paymentId])
  @@index([action])
  @@index([createdAt])
}

// Coupon Model
model Coupon {
  id                String       @id @default(uuid())
  code              String       @unique // Coupon code (e.g., "SAVE20")
  description       String?      @db.Text
  
  // Discount Type & Amount
  discountType      DiscountType @map("discount_type") // PERCENTAGE, FIXED_AMOUNT, FREE_SHIPPING
  discountValue     Float        @map("discount_value") // Percentage (20) or Fixed Amount (10.00)
  
  // Usage Limits
  maxUses           Int?         @map("max_uses") // Total times this coupon can be used (null = unlimited)
  maxUsesPerUser    Int?         @default(1) @map("max_uses_per_user") // Times per user
  usedCount         Int          @default(0) @map("used_count") // Times this coupon has been used
  
  // Conditions
  minimumOrderValue Float?       @map("minimum_order_value") // Minimum cart value to apply
  maxDiscount       Float?       @map("max_discount") // Max discount amount (for percentage coupons)
  
  // Validity
  isActive          Boolean      @default(true) @map("is_active")
  validFrom         DateTime     @default(now()) @map("valid_from")
  validUntil        DateTime?    @map("valid_until")
  
  // Timestamps
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  
  // Relations
  orders            Order[]
  
  @@map("coupons")
  @@index([code])
  @@index([isActive])
}

enum DiscountType {
  PERCENTAGE      // e.g., 20% off
  FIXED_AMOUNT    // e.g., $10 off
  FREE_SHIPPING   // Free shipping
  
  @@map("discount_type")
}

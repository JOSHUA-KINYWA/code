// This is your Prisma schema file for E-commerce Store
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  avatar        String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          Cart?
  favorites     Favorite[]
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Product Model
model Product {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  price         Float
  comparePrice  Float?    // Original price for discount display
  images        String[]
  category      String
  stock         Int       @default(0)
  isActive      Boolean   @default(true)
  rating        Float     @default(0)
  reviewCount   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  favorites     Favorite[]
  
  @@map("products")
  @@index([category])
  @@index([isActive])
}

// Cart Model
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@map("carts")
}

// Cart Item Model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("cart_items")
  @@unique([cartId, productId])
}

// Order Model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PROCESSING)
  
  // Pricing
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  
  // Shipping Info
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String
  
  // Payment Info
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deliveredAt     DateTime?
  
  // Relations
  items           OrderItem[]
  
  @@map("orders")
  @@index([userId])
  @@index([status])
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order Item Model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float    // Price at time of order
  createdAt DateTime @default(now())
  
  @@map("order_items")
}

// Review Model
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5
  title     String
  comment   String   @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
  @@unique([userId, productId]) // One review per user per product
  @@index([productId])
}

// Address Model
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  country   String   @default("United States")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("addresses")
  @@index([userId])
}

// Favorite/Wishlist Model
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@map("favorites")
  @@unique([userId, productId])
  @@index([userId])
}
